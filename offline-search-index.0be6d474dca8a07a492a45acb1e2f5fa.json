










[{"body":"DOCS AS\nCODE Carl Chesser @che55er | che55er.io     About Me      Guides through drawings   Topics 🔍 Introduction 📚 Background 🚀 Examples\n","categories":"","description":"","excerpt":"DOCS AS\nCODE Carl Chesser @che55er | che55er.io     About Me …","ref":"/docs-as-code/slides/","tags":"","title":"Docs as Code"},{"body":" Fantastic resource 👇\n\n Docs as Code? Documentation as Code (Docs as Code) refers to a philosophy that you should be writing documentation with the same tools as code.\nSource: Write the Docs\n Docs as Code uses... Source: Write the Docs 🐞 Issue Trackers\n🌳 Version Control (git)\n🔤 Plain Text Markup\n(Markdown, reStructuredText, Asciidoc)\n💬 Code Reviews\n✅ Automated Tests\n 🐞 Issue Trackers Align tracking the work of documentation with code. (have it live in the same queue)\n 🌳 Version Control (git) Enable docs and code to live in same changeset\n(like your tests)\nEnable concurrent development branches\n🌈 Enable all the features of version control for your documentation!\n 🔤 Plain Text Markup Enable all the features of your code editors in documentation\n (compare, find/replace, track in version control)\n🌈 Many editors with preview mode for Markdown as you edit!\n  💬 Code Reviews Enable discussions with code using the same toolchain (line-by-line comments, suggestions they can apply, CODEOWNERS)\n ✅ Automated Tests Enable static analysis tests on documentation (status checks on pull requests)\n Creating the Culture of Documentation\n Write the Docs (Twitter, 2014)   Documentation, Disrupted How Two Technical Writers Changed Google Engineering Culture Write the Docs (Google, 2015)   How we are solving internal technical documentation at Spotify Write the Docs (Spotify, 2019)   Open-sourced September 2020!   Problematic Signals 🏝 Islands of documentation\n(MediaWiki, Confluence, Office 365, READMEs, GitHub Pages)\n📜 Excessive documentation decay (possibly caused by islands)\n🔍 Searchability challenges\n🤷‍♂️ Different process for maintaining (vs. with code)\n😐 Lack of trust on the content\n 🏝 Islands of documentation\n(MediaWiki, Confluence, Office 365, READMEs, GitHub Pages)\n📜 Documentation decay due to islands\n🔍 Searchability challenges\n 🏝 Islands of documentation\n(MediaWiki, Confluence, Office 365, READMEs, GitHub Pages)\n📜 Documentation decay due to islands\n🔍 Searchability challenges\n🌎 A centralized build system for documentation that can enable content through a common convention\n  🤷‍♂️ Different process for maintaining (vs. with code)\n 🤷‍♂️ Different process for maintaining (vs. with code)\n🧰 Enable documentation to exist closer to the code and toolchain\n  😐 Lack of trust on the content\n 😐 Lack of trust on the content\n🪄 Make it easy for anyone to contribute\nhelp them along the way, like DocDays!\n   But, not everyone has GitHub access…\nor knows Markdown.\n🤷‍♂️  🧩 Ensure approach aligns with strategy for expected toolchain access\n(GitHub Enterprise)\n 🔤 Illustrate through examples that if you know text, you can write Markdown\nMajority of contributions = textual content, ≠ formatting\n","categories":"","description":"","excerpt":" Fantastic resource 👇\n\n Docs as Code? Documentation as Code (Docs as …","ref":"/docs-as-code/slides/background/","tags":"","title":"Docs as Code: History"},{"body":"What is Docs as Code? As defined by Write the Docs:\n Documentation as Code (Docs as Code) refers to a philosophy that you should be writing documentation with the same tools as code:\n Issue Trackers Version Control (Git) Plain Text Markup (Markdown, reStructuredText, Asciidoc) Code Reviews Automated Tests   History There are some valuable talks that cover approaches at different companies when dealing with Docs as Code. These talks helps share approaches with common motivators that support the Docs as Code approach.\n2014: Creating the Culture of Documentation In this talk, they shared similar struggles of documentation being in different locations, not being well-maintained, and how they focused on the problem on documentation maintainability from the engineer’s perspective. They ended up making a convention of how they treat their docs like code to improve how documentation is maintained with code changesets. This resulted in making common documentation templates (Overview, Getting Started, etc) as part of every project, and having the build system publish this in one central location. They called this build platform: Docbird. They realized they had to change the culture on documentation, but that required listening to engineers to find out how to make this valuable to them.\n  2015: Documentation, Disrupted: How Two Technical Writers Changed Google Engineering Culture The following year, Riona MacNamara from Google shared a talk at Write the Docs on how this Twitter talk influenced them in changing their culture. They found the same challenges with their documentation, where the problem wasn’t that there was enough documentation, but rather it was outdated and untrustworthy. They joked that they are the best in the world at indexing information, but that wasn’t true for their internal technical documentation. When people didn’t trust documentation, the authority was the code. This introduced productivity challenges, as different team members would have to discover more facts by going into codebases. Like code, documentation is both an asset and a liability to maintain. They then followed a similar approach to Twitter, where they had teams source their documentation in their codebase with a common convention (Markdown files in a “docs” directory). Content would get built in their central build system and it would be centrally referenced through a single portal. The name of their documentation platform was g3doc (you may see references to it when you search their open-source projects).\n  2019: How we are solving internal technical documentation at Spotify Finally, this was further expanded with Spotify in 2019 that referenced what Google had applied. They called this TechDocs, where docs are treated like code. Documentation templates and a central location that hosts this rendered content (Markdown generated into HTML) is searchable and better maintained since it lives close to the codebase and follows the same toolchain of their software development process (ex. GitHub). They have later shared this through their open-source project call Backstage (a CNCF sandbox project).\n  ","categories":"","description":"This site is intended to host some common references and introductory content on Docs as Code.","excerpt":"This site is intended to host some common references and introductory …","ref":"/docs-as-code/","tags":"","title":"Introduction"},{"body":"This site also generates presentation slides that are managed through Markdown and HTML using reveal.js. This is powered through the use of the reveal-hugo theme, that is used in combination with the Docsy theme.\nConfiguration The following is supplied in the config.toml:\ntheme = [\"reveal-hugo\", \"docsy\"] The site is configured with the following configuration in the front-matter for the root _index.md file:\ncascade:- type:\"reveal\"_target:path:\"/slides/**\"- type:\"docs\"_target:path:\"/**\"---This results in a site that is modeled like the mostlydocs site example (which is template that you can use), to build a site that starts with a primary docs site. This excludes the more elaborate root landing page that you can format differently, if you are just really wanting to host structured documentation.\n","categories":"","description":"Example of using both Docsy + reveal-hugo themes for technical documentation and slides.","excerpt":"Example of using both Docsy + reveal-hugo themes for technical …","ref":"/docs-as-code/theme/","tags":"","title":"Theme"},{"body":"Supported Diagramming Mermaid Mermaid has first class support in the Docsy theme. This allows you to use code fences to build a block to illustrate a diagram.\nflowchart LR A(fas:fa-cog Hugo) --\u003e|read|B(fab:fa-markdown Markdown) A --\u003e|read|C(fas:fa-tshirt Hugo themes) A --\u003e|generate|D(Static content) E(fas:fa-users) --\u003e|views|F(fab:fa-github GitHub Pages) F --\u003e|serves|D G(fas:fa-bolt GitHub Action) --\u003e|invokes|A To try different ways of building these diagrams, try out their live editor.\nMarkmap Markmap is also supported in the theme, allowing you to visual a mindmap.\n# Docs as Code ## Markdown ## Hugo * docsy theme * reveal-hugo theme ## GitHub Pages ## GitHub Actions Others Projects Here are some other projects that can enable you to leverage this approach in your projects:\n Mermaid: Mermaid lets you create diagrams and visualizations using text and code. Diagrams as Code: Diagrams lets you draw the cloud system architecture in Python code. Structurizr: Allows you to create multiple diagrams based upon the C4 model, in multiple output formats, from a single DSL source file.  ","categories":"","description":"Allows you to visualize diagrams from text or code.","excerpt":"Allows you to visualize diagrams from text or code.","ref":"/docs-as-code/diagrams/","tags":"","title":"Diagrams"},{"body":" 🚀 Examples 🔤 Markdown: Authoring\n⚙️ Hugo: Generating\n👔 Docsy: Theming\n⚡️ GitHub Actions: Building\n📑 GitHub Pages: Serving\n 🔤 Markdown Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.\nSource: The Markdown Guide\n Editing  Great resource 👇\n\n The world’s fastest framework for building websites\nhttps://gohugo.io/\n Hugo Features 🦄 Shortcodes Powerful way to extend beyond Markdown with reusable code blocks 🪴 Multiple Formats Hugo allows you to output your content in multiple formats...like this presentation 🦥 Flexible Build different types of content (menus, diagrams) to make a rich website out of Markdown ⚡️ Speed At  Open-sourced July 2019!   A Hugo theme for creating great technical documentation sites   👔 Docsy Examples   🦄 Shortcodes Generate API documentation from your OpenAPI (Swagger) specifications.\n{{}}   🧜‍♀️ Diagrams: Mermaid ```mermaid graph LR Start -- Need{\"Do I need diagrams\"} Need -- No -- Off[\"Set params.mermaid.enable = false\"] Need -- Yes -- HaveFun[\"Great! Enjoy!\"] ```   GitHub Actions Build your docs!\nInclude in .github/workflows/gh-pages.yaml file.\nname: github pages on: push: branches: - main pull_request: jobs: deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v2 with: submodules: recursive # Fetch the Docsy theme fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: # Can pin to a specific version if needed, ex: # hugo-version: '0.79.1' hugo-version: 'latest' extended: true - name: Setup Node uses: actions/setup-node@v2 with: node-version: '14' - name: Cache dependencies uses: actions/cache@v1 with: path: ~/.npm key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys: | ${{ runner.os }}-node- - run: npm ci - run: hugo env: HUGO_ENV: production - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == 'refs/heads/main' }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages  GitHub Actions Test your docs (spellcheck)!\nInclude in .github/workflows/validation.yaml file.\nname: validation on: push: branches: - main pull_request: jobs: spell-check: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 name: Check out the code - uses: actions/setup-node@v1 name: Run spell check with: node-version: \"12\" - run: npm install -g cspell - run: cspell lint --config .github/cspell.json \"content/**/*.md\"  GitHub Actions ✅ Enforce your tests in pull requests\n  📑 GitHub Pages ⚒️ GitHub Actions build content on PRs and main\n🧆 Generate and store static content for serving\n 🧪 Try it out! https://cchesser.github.io/docs-as-code/\n✍️ Try the Edit this Page link to make a change via a PR\n⚙️ See build process on pull request and preview\n","categories":"","description":"","excerpt":" 🚀 Examples 🔤 Markdown: Authoring\n⚙️ Hugo: Generating\n👔 Docsy: Theming …","ref":"/docs-as-code/slides/examples/","tags":"","title":"Docs as Code: Examples"},{"body":"   window.onload = function () { const ui = SwaggerUIBundle({ url: \"/docs-as-code/openapi/petstore.yaml\", dom_id: '#ohpen_swagger_ui', presets: [ SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset ] }); window.ui = ui; };  ","categories":"","description":"OpenAPI (Swagger) example referencing a pet store API specification.","excerpt":"OpenAPI (Swagger) example referencing a pet store API specification.","ref":"/docs-as-code/api/","tags":"","title":"API"},{"body":"Recap 📓 Definition and approach\n📚 Background of how others have approached it\n❤️ Benefits and how it lends to common problems in documentation\n🚀 Examples with: Markdown, Hugo, Docsy, GitHub, GitHub Actions, GitHub Pages\n Thank You  Thank You! Carl Chesser @che55er | che55er.io     ","categories":"","description":"","excerpt":"Recap 📓 Definition and approach\n📚 Background of how others have …","ref":"/docs-as-code/slides/conclusion/","tags":"","title":"Docs as Code: Conclusion"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs-as-code/index.json","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs-as-code/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs-as-code/tags/","tags":"","title":"Tags"}]